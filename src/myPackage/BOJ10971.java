package myPackage;
/*
 * 외판원 순회2
 * 1번부터 N번까지 번호가 매겨져 있는 도시들이 있고, 도시들 사이에는 길이 있다.
 * 길어 없을 수도 있다.
 * 외판원이 한 도시에서 출발해 N개의 도시를 모두 거쳐,
 * 다시 원래의 도시로 돌아오는 순회 여행 경로를 계획
 * 한 번 갔던 도시로는 다시 갈 수 없다.(출발도시로 돌아오는 것 제외)
 * 이런 여행 경로중 가장 적은 비용을 들이는 계획찾기
 * 각 도시간 이동에 드는 비용은 W[i][j](W[i][j] != W[j][i], 양의정수)
 * 항상 W[i][i] = 0, 도시 i에서 j로 갈 수 없으면 W[i][j] = 0
 * 
 * 입력
 * 첫째줄: 도시의 수 N(2<=N<=10)
 * 다음N개줄: 비용 행렬(1,000,000이하의 양의 정수)
 * 항상 순회할 수 있는 경우만 입력으로 주어진다.
 * 
 * 출력
 * 순회에 필요한 최소 비용 출력
 */
public class BOJ10971 {

}
